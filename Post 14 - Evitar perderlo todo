import pandas as pd
import datetime as dt
import yfinance as yf
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
plt.style.use('seaborn-white')
plt.rcParams['figure.figsize'] = [12,6]
plt.rcParams["font.weight"] = "bold"
plt.rcParams["axes.labelweight"] = "bold"
plt.rcParams["font.size"] = 15

#==============================================================================
#       MINERAS DE ORO
#==============================================================================
tickers = ["AUY", "GDX", "GOLD", "HMY", "NEM"]

precios = yf.download(tickers, period="max")["Adj Close"]
var = precios.pct_change()
var.dropna(inplace=True)
weights = [0.15, 0, 0.55, 0.15, 0.15]
var["portfolio_daily_ret"] = (weights * var).sum(axis=1)
var["portfolio_accum_ret"] = (1+var["portfolio_daily_ret"]).cumprod()
var["GDX_accum_ret"] = (1+var["GDX"]).cumprod()

plt.title("Replicar mineras de oro desde Argentina",  fontweight="bold",
          fontsize=20)
plt.plot(var["portfolio_accum_ret"], label="Cedears Mineras", c="b")
plt.plot(var["GDX_accum_ret"], label="ETF Mineras", c="r")
plt.ylabel("2006 = 1")
plt.legend()
plt.show()

#==============================================================================
#       BRASIL
#==============================================================================
tickers = ["ABEV", "BBD", "BSBR", "EWZ", "GGB", "ITUB",
           "PBR", "UGP", "VALE", "VIV"]

precios = yf.download(tickers, period="max")["Adj Close"]
BRA = precios.pct_change()
BRA.dropna(inplace=True)
weights = [0.10, 0.18, 0.01, 0, 0.02, 0.2, 0.2, 0.01, 0.25, 0.03]
BRA["portfolio_daily_ret"] = (weights * BRA).sum(axis=1)
BRA["portfolio_accum_ret"] = (1+BRA["portfolio_daily_ret"]).cumprod()
BRA["EWZ_accum_ret"] = (1+BRA["EWZ"]).cumprod()

plt.title("Replicar Brasil desde Argentina",  fontweight="bold",
          fontsize=20)
plt.plot(BRA["portfolio_accum_ret"], label="Cedears Brasil", c="b")
plt.plot(BRA["EWZ_accum_ret"], label="ETF Brasil", c="r")
plt.ylabel("2009 = 1")
plt.legend()
plt.show()

#==============================================================================

tickers = ["QQQ", "SPY", "GDX", "EWZ", "SHY", "TLT", "GLD"]
precios = yf.download(tickers, period="max")["Adj Close"]
yields= precios.pct_change()
yields.dropna(inplace=True)

plt.title("Correlaciones en rendimientos diarios 2006-2020",
          fontsize=18, fontweight='bold')
sns.heatmap(yields.corr(), cmap='coolwarm', annot=True, linewidths=.5)
plt.show()

#==============================================================================
#       ALL WEATHER PORTFOLIO
#==============================================================================

tickers = ["DBC","GLD", "IEF", "SPY", "TLT"]
cartera = yf.download(tickers, period="max")["Adj Close"]
yields = cartera.pct_change()
yields.dropna(inplace=True)
weights = [0.075, 0.075, 0.15, 0.3, 0.4]
yields["portfolio_daily_ret"] = (weights * yields).sum(axis=1)
yields["portfolio_accum_ret"] = (1+yields["portfolio_daily_ret"]).cumprod()
yields["SPY_accum_ret"] = (1+yields["SPY"]).cumprod()
yields["SPY_accum_max"] = yields["SPY_accum_ret"].cummax()
yields["AWP_accum_max"] = yields["portfolio_accum_ret"].cummax()
yields["SPY_dd"] = (yields["SPY_accum_ret"] - yields["SPY_accum_max"]) /  yields["SPY_accum_max"]
yields["AWP_dd"] = (yields["portfolio_accum_ret"] - yields["AWP_accum_max"]) /  yields["AWP_accum_max"]

fig, (ax1, ax2) = plt.subplots(nrows=2, sharex=True, figsize=(12,8))
ax1.set(title="All Weather Portfolio vs S&P 500")
ax1.plot(yields["portfolio_accum_ret"], label="All weather portfolio", c="b")
ax1.plot(yields["SPY_accum_ret"], label="S&P 500", c="r")
ax1.grid(True)
ax1.legend()

ax2.set(title="Bajas desde máximos (%)")
ax2.plot(yields["AWP_dd"]*100, c="b", alpha=0.5)
ax2.fill_between(yields.index, yields["AWP_dd"]*100, 0,
                 color="b", alpha=0.5)
ax2.plot(yields["SPY_dd"]*100, c="r", alpha=0.5)
ax2.fill_between(yields.index, yields["SPY_dd"]*100, 0,
                 color="r", alpha=0.5)

print(f'Baja máxima del S&P 500 = {round(yields["SPY_dd"].min()*100,2)}%')
print(f'Baja máxima del All Weather Portfolio = {round(yields["AWP_dd"].min()*100,2)}%')

